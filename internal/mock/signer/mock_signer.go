// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock_signer is a generated GoMock package.
package mock_signer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	utils "github.com/mselser95/blockchain/pkg/utils"
)

// MockTransactionSigner is a mock of TransactionSigner interface.
type MockTransactionSigner struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionSignerMockRecorder
}

// MockTransactionSignerMockRecorder is the mock recorder for MockTransactionSigner.
type MockTransactionSignerMockRecorder struct {
	mock *MockTransactionSigner
}

// NewMockTransactionSigner creates a new mock instance.
func NewMockTransactionSigner(ctrl *gomock.Controller) *MockTransactionSigner {
	mock := &MockTransactionSigner{ctrl: ctrl}
	mock.recorder = &MockTransactionSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionSigner) EXPECT() *MockTransactionSignerMockRecorder {
	return m.recorder
}

// SignTransaction mocks base method.
func (m *MockTransactionSigner) SignTransaction(tx *utils.Transaction) (*utils.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTransaction", tx)
	ret0, _ := ret[0].(*utils.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTransaction indicates an expected call of SignTransaction.
func (mr *MockTransactionSignerMockRecorder) SignTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTransaction", reflect.TypeOf((*MockTransactionSigner)(nil).SignTransaction), tx)
}
